// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: quDeq6xe5KMiTCfKiiLfyW
// Component: X2cqL1Cthc0K

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName,
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions,
} from "@plasmicapp/react-web/lib/host";

import Header from "../../../.plasmic/Header"; // plasmic-import: gcpmzTU7M7CU/component
import { InfiniteMenuContainer } from "../../InfiniteMenuContainer"; // plasmic-import: y16k3U0uSpK3/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: quDeq6xe5KMiTCfKiiLfyW/projectcss
import sty from "./PlasmicExchangespage.module.css"; // plasmic-import: X2cqL1Cthc0K/css

createPlasmicElementProxy;

export type PlasmicExchangespage__VariantMembers = {};
export type PlasmicExchangespage__VariantsArgs = {};
type VariantPropType = keyof PlasmicExchangespage__VariantsArgs;
export const PlasmicExchangespage__VariantProps = new Array<VariantPropType>();

export type PlasmicExchangespage__ArgsType = {};
type ArgPropType = keyof PlasmicExchangespage__ArgsType;
export const PlasmicExchangespage__ArgProps = new Array<ArgPropType>();

export type PlasmicExchangespage__OverridesType = {
  root?: Flex__<"div">;
  header?: Flex__<typeof Header>;
  infiniteMenuContainer?: Flex__<typeof InfiniteMenuContainer>;
};

export interface DefaultExchangespageProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicExchangespage__RenderFunc(props: {
  variants: PlasmicExchangespage__VariantsArgs;
  args: PlasmicExchangespage__ArgsType;
  overrides: PlasmicExchangespage__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants,
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        <Header
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames("__wab_instance", sty.header)}
        />

        <div className={classNames(projectcss.all, sty.freeBox__vfxkQ)}>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__z4MtP)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__l3D4Z)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qJiAx
                )}
              >
                {"AIESEC"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pVyfC
                )}
              >
                {"EXCHANGE"}
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___7WiRr)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wkXq1
                )}
              >
                {"Sri"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__siXqF
                )}
              >
                {"Lanka"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__wJk1Q
                )}
              >
                {"How was"}
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__jHyd5
              )}
            >
              {"?"}
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oxEmX
            )}
          >
            <React.Fragment>
              <React.Fragment>{"Let's here from our past "}</React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ color: "var(--token-E78glSjQcy_l)" }}
              >
                {"Exchange Participants"}
              </span>
              <React.Fragment>{"!"}</React.Fragment>
            </React.Fragment>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox___6Aj)}>
          <InfiniteMenuContainer
            data-plasmic-name={"infiniteMenuContainer"}
            data-plasmic-override={overrides.infiniteMenuContainer}
            className={classNames("__wab_instance", sty.infiniteMenuContainer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "infiniteMenuContainer"],
  header: ["header"],
  infiniteMenuContainer: ["infiniteMenuContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  infiniteMenuContainer: typeof InfiniteMenuContainer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicExchangespage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicExchangespage__VariantsArgs;
    args?: PlasmicExchangespage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicExchangespage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicExchangespage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicExchangespage__ArgProps,
          internalVariantPropNames: PlasmicExchangespage__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicExchangespage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicExchangespage";
  } else {
    func.displayName = `PlasmicExchangespage.${nodeName}`;
  }
  return func;
}

export const PlasmicExchangespage = Object.assign(
  // Top-level PlasmicExchangespage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    infiniteMenuContainer: makeNodeComponent("infiniteMenuContainer"),

    // Metadata about props expected for PlasmicExchangespage
    internalVariantProps: PlasmicExchangespage__VariantProps,
    internalArgProps: PlasmicExchangespage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
);

export default PlasmicExchangespage;
/* prettier-ignore-end */
